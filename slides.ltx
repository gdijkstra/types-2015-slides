\documentclass{beamer}

\usetheme{Madrid}
\usecolortheme{dolphin}
\setbeamertemplate{navigation symbols}{} 

%include slides.fmt

\usepackage{color}

%% Encoding, font stuff
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[activate={true,nocompatibility},final,tracking=true,kerning=true,spacing=true,factor=1100,stretch=10,shrink=10,protrusion=trues]{microtype}
\usepackage{tgpagella}

%% Symbols and whatever
\usepackage{amsmath,amsthm,amssymb,stmaryrd}

\usepackage{alltt}

%% Layout stuff and other related goodies.
\usepackage[parfill]{parskip}
\usepackage{xspace}
\usepackage{todonotes}

%% URLs and other link stuff
\usepackage{url}
\usepackage{hyperref}
\usepackage[noabbrev]{cleveref}

\hypersetup{
  colorlinks,
  citecolor=DarkBlue,
  linkcolor=black,
  urlcolor=DarkBlue}

%% Commands
\newcommand{\todoi}[1]{\todo[inline]{#1}}
\newcommand{\withoutk}{\xspace\verb+--without-K+\xspace}
\newcommand{\uip}{uniqueness of identity proofs\xspace}
\newcommand{\Uip}{Uniqueness of identity proofs\xspace}
\newcommand{\hott}{homotopy type theory\xspace}
\newcommand{\Hott}{Homotopy type theory\xspace}
\newcommand{\mltt}{Martin-L\"of's type theory\xspace}
\newcommand{\hit}{higher inductive type\xspace}
\newcommand{\Hit}{Higher inductive type\xspace}
\newcommand{\hits}{higher inductive types\xspace}
\newcommand{\Hits}{Higher inductive types\xspace}
\newcommand{\oit}{ordinary inductive type\xspace}
\newcommand{\Oit}{Ordinary inductive type\xspace}
\newcommand{\oits}{ordinary inductive types\xspace}
\newcommand{\Oits}{Ordinary inductive types\xspace}
\newcommand{\zeroconstructor}{$0$-constructor\xspace}
\newcommand{\zeroconstructors}{$0$-constructors\xspace}
\newcommand{\onehit}{$1$-HIT\xspace}
\newcommand{\onehits}{$1$-HITs\xspace}
\newcommand{\oneconstructor}{$1$-constructor\xspace}
\newcommand{\oneconstructors}{$1$-constructors\xspace}
\newcommand{\twohit}{$2$-HIT\xspace}
\newcommand{\twohits}{$2$-HITs\xspace}
\newcommand{\twoconstructor}{$2$-constructor\xspace}
\newcommand{\twoconstructors}{$2$-constructors\xspace}
\newcommand{\ie}{i.e.\xspace}
\newcommand{\eg}{e.g.\xspace}

% Path composition from The Book.
\newcommand{\ct}{%
  \mathchoice{\mathbin{\raisebox{0.5ex}{$\displaystyle\centerdot$}}}%
             {\mathbin{\raisebox{0.5ex}{$\centerdot$}}}%
             {\mathbin{\raisebox{0.25ex}{$\scriptstyle\,\centerdot\,$}}}%
             {\mathbin{\raisebox{0.1ex}{$\scriptscriptstyle\,\centerdot\,$}}}
}


\title[Towards a theory of HITs]{Towards a theory of \hits}

\author[]{
  Thorsten Altenkirch\inst{1}
\and
  Paolo Capriotti\inst{1}
\and
  Gabe Dijkstra\inst{1}\\
\and
  Fredrik Nordvall Forsberg\inst{2}
}

\institute[]{
  Nottingham University
\and
  University of Strathclyde
 }

\date{\today}

\begin{document}


\begin{frame}
\maketitle
\end{frame}

\begin{frame}{\Hits versus \oits}
Ordinary inductive types:
\begin{code}
  data T : Type where
    c0  : F0 T -> T
        vdots
    ck  : Fk T -> T
\end{code}

where every |Fi : Type -> Type| is a (strictly positive) functor.
\end{frame}

\begin{frame}{\Hits versus \oits}
Ordinary inductive types:
\begin{code}
  data T : Type where
    c  : F0 T + hdots + Fk T -> T
\end{code}

where every |Fi : Type -> Type| is a (strictly positive) functor.
\end{frame}

\begin{frame}{\Hits versus \oits}
Ordinary inductive types:
\begin{code}
  data T : Type where
    c  : F T -> T
\end{code}

where |F : Type -> Type| is a (strictly positive) functor.
\end{frame}

\begin{frame}{\Hits versus \oits}
  Higher inductive types:

  We can have dependencies between constructors:

  \begin{code}
    data T2 : Type where
      base : T2
      p : base = base
      q : base = base
      t : p * q = q * p
  \end{code}

  This can no longer be described by just a single functor |Type ->
  Type|.
\end{frame}

\begin{frame}{General framework}
  In general, we want to talk about inductive definitions of the form:

  \begin{code}
    data T : Type
      c0 : (x : F0 T)                     -> G0 T x
         vdots
      ck : (x : Fk (T, c0, hdots, ckmo))  -> Gk (T, c0, hdots, ckmo) x
  \end{code}

\end{frame}

\begin{frame}{Strict positivity}
  We can't allow any arguments functor: it has to be strictly positive.
\end{frame}

\end{document}
